@page "/telemetry"
@inject NavigationManager nv
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json
@using System.Text.Json.Serialization;
@inject HubConnection hub

<div class="container">
    <div class="card shadow-sm">
        <div class="card-header">
            <h2 class="card-title">Telemetry</h2>
        </div>
        <div class="card-body">
            @if (messages.Count == 0)
            {
                <p><em>Waiting for data...</em></p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-primary">
                        <tr>
                            <th>Time</th>
                            <th>Scout ID</th>
                            <th>Module</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var msg in messages)
                        {
                            @foreach (var mod in msg.Modules)
                            {
                                <tr>
                                    <td>@msg.Timestamp.TimeOfDay</td>
                                    <td>@msg.ScoutId</td>
                                    <td>@mod.Type</td>
                                    <td>@mod.Value</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
@code {

    private List<TelemetryMessage> messages = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the SignalR hub
        hub.On<string, string>("Receive", async (topic, payload) =>

        {
            try
            {
                var msg = JsonSerializer.Deserialize<TelemetryMessage>(payload);
                if (msg is null) return;

                messages.Add(msg);
                if (messages.Count > 3)
                {
                    messages.RemoveAt(0); // Keep the last 3 messages
                }


                await InvokeAsync(StateHasChanged);
            }
            catch (JsonException ex)
            {
                Console.Error.WriteLine($"Failed to deserialize telemetry message: {ex.Message}");
            }
        });

        if (hub.State == HubConnectionState.Disconnected)
        {
            await hub.StartAsync();

        }
    }
}
