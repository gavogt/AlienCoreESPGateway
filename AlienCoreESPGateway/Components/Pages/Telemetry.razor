@page "/telemetry"
@using Syncfusion.Blazor.Charts
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Collections.ObjectModel
@using System.Linq
@inject HubConnection hub
@inject NavigationManager nav
@inject TelemetryDataService telemetryDataService
@inject GptService gptService

<div class="container mt-4">
	<div class="row justify-content-center">
		<div class="col-12 col-md-10 col-lg-8">
			<div class="card mb-4">
				<div class="card-header"><strong>Live Telemetry Chart</strong></div>
				<div class="card-body">
					<SfChart Height="350px" Width="700px" Title="Telemetry Modules">
						<!-- X axis: timestamps as categories -->
						<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTimeCategory"
										   LabelFormat="HH:mm:ss"
										   Title="Timestamp" />

						<!-- Y axis: raw values -->
						<ChartPrimaryYAxis Title="Value"
										   LabelFormat="{value}" />

						<!-- legend at top -->
						<ChartLegendSettings Visible="true" Position="LegendPosition.Top" />

						<ChartSeriesCollection>
							<!-- NEURO -->
							<ChartSeries DataSource="@telemetryDataService.NeuroRows"
										 XName="TimeStamp"
										 YName="Value"
										 Type="ChartSeriesType.StackingLine"
										 Name="NEURO"
										 Width="2" />

							<!-- PLASMA -->
							<ChartSeries DataSource="@telemetryDataService.PlasmaRows"
										 XName="TimeStamp"
										 YName="Value"
										 Type="ChartSeriesType.StackingLine"
										 Name="PLASMA"
										 Width="2" />

							<!-- BIO -->
							<ChartSeries DataSource="@telemetryDataService.BioRows"
										 XName="TimeStamp"
										 YName="Value"
										 Type="ChartSeriesType.StackingLine"
										 Name="BIO"
										 Width="2" />
						</ChartSeriesCollection>
					</SfChart>
				</div>
			</div>
			<div class="card mb-4">
				<div class="card-header"><strong>Ask GPT about the Data</strong></div>
				<div class="card-body">
					<div class="input-group">
						<textarea @bind="_question"
								  class="form-control"
								  rows="2"
								  placeholder="What do you want to know about this data?">
						</textarea>
						<button class="btn btn-primary mt-2" @onclick="AskGPT">Ask GPT</button>

						@if (_answer is not null)
						{
							<div class="mt-2 p-2 bg-light border rounded">
								<h6>GPT Answer:</h6>
								<p>@_answer</p>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
		<div class="card mb-4">
		<div class="card-header"><strong>Telemetry</strong></div>
		<div class="card-body">
			@if (telemetryDataService.messages.Count == 0)
			{
				<p><em>Waiting for data…</em></p>
			}
			else
			{
				<table class="table table-striped table-hover">
					<thead class="table-primary">
						<tr><th>Time</th><th>Scout ID</th><th>Module</th><th>Value</th></tr>
					</thead>
					<tbody>
						@foreach (var msg in telemetryDataService.messages)
						{
							@foreach (var mod in msg.Modules)
							{
								<tr>
									<td>@msg.Timestamp.TimeOfDay</td>
									<td>@msg.ScoutId</td>
									<td>@mod.Type</td>
									<td>@mod.Value</td>
								</tr>
							}
						}
					</tbody>
				</table>
			}
			</div>
		</div>
	</div>
</div>
@if (!string.IsNullOrWhiteSpace(_err))
{
	<div class="alert alert-danger mt-3">@_err</div>
}

@code {

	private string? _err;
	private string? _question;
	private string? _answer;

	protected override async Task OnInitializedAsync()
	{
		// subscribe
		hub.On<string, string>("Receive", (topic, payload) =>
		{
			try
			{
				var msg = JsonSerializer.Deserialize<TelemetryMessage>(payload);
				if (msg is null) return;

				telemetryDataService.AddMessage(msg);

				InvokeAsync(StateHasChanged);
			}
			catch (Exception ex)
			{
				_err = ex.Message;
				InvokeAsync(StateHasChanged);
			}
		});

		// start the hub if needed
		if (hub.State == HubConnectionState.Disconnected)
			await hub.StartAsync();
	}

	private async Task AskGPT()
	{
		if (string.IsNullOrWhiteSpace(_question))
			return;

		_answer = await gptService.AskAsync(_question);
	}
}