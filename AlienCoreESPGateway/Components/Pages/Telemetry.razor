@page "/telemetry"
@using Syncfusion.Blazor.Charts
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Collections.ObjectModel
@using System.Linq
@inject HubConnection hub
@inject NavigationManager nav
@inject TelemetryDataService telemetryDataService

<div class="container mt-4">
	<div class="row justify-content-center">
		<div class="col-auto">
			<h3 class="text-center">Syncfusion ChartJs</h3>
			<SfChart Height="350px" Width="700px" Title="Telemetry Modules">
				<!-- X axis: timestamps as categories -->
				<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTimeCategory"
								   LabelFormat="HH:mm:ss"
								   Title="Timestamp" />

				<!-- Y axis: raw values -->
				<ChartPrimaryYAxis Title="Value"
								   LabelFormat="{value}" />

				<!-- legend at top -->
				<ChartLegendSettings Visible="true" Position="LegendPosition.Top" />

				<ChartSeriesCollection>
					<!-- NEURO -->
					<ChartSeries DataSource="@telemetryDataService.NeuroRows"
								 XName="TimeStamp"
								 YName="Value"
								 Type="ChartSeriesType.StackingLine"
								 Name="NEURO"
								 Width="2" />

					<!-- PLASMA -->
					<ChartSeries DataSource="@telemetryDataService.PlasmaRows"
								 XName="TimeStamp"
								 YName="Value"
								 Type="ChartSeriesType.StackingLine"
								 Name="PLASMA"
								 Width="2" />

					<!-- BIO -->
					<ChartSeries DataSource="@telemetryDataService.BioRows"
								 XName="TimeStamp"
								 YName="Value"
								 Type="ChartSeriesType.StackingLine"
								 Name="BIO"
								 Width="2" />
				</ChartSeriesCollection>
			</SfChart>
		</div>
	</div>
</div>
<!-- ============ RAW TABLE ============ -->
<div class="container mt-4">
	<div class="card shadow-sm">
		<div class="card-header"><h2 class="card-title">Telemetry</h2></div>
		<div class="card-body">
			@if (messages.Count == 0)
			{
				<p><em>Waiting for data…</em></p>
			}
			else
			{
				<table class="table table-striped table-hover">
					<thead class="table-primary">
						<tr><th>Time</th><th>Scout ID</th><th>Module</th><th>Value</th></tr>
					</thead>
					<tbody>
						@foreach (var msg in messages)
						{
							@foreach (var mod in msg.Modules)
							{
								<tr>
									<td>@msg.Timestamp.TimeOfDay</td>
									<td>@msg.ScoutId</td>
									<td>@mod.Type</td>
									<td>@mod.Value</td>
								</tr>
							}
						}
					</tbody>
				</table>
			}
		</div>
	</div>
</div>

@if (!string.IsNullOrWhiteSpace(_err))
{
	<div class="alert alert-danger mt-3">@_err</div>
}

@code {
	// raw telemetry messages for the table
	private readonly List<TelemetryMessage> messages = new();
	private string? _err;

	protected override async Task OnInitializedAsync()
	{
		// subscribe
		hub.On<string, string>("Receive", (topic, payload) =>
		{
			try
			{
				var msg = JsonSerializer.Deserialize<TelemetryMessage>(payload);
				if (msg is null) return;




				InvokeAsync(StateHasChanged);
			}
			catch (Exception ex)
			{
				_err = ex.Message;
				InvokeAsync(StateHasChanged);
			}
		});

		// start the hub if needed
		if (hub.State == HubConnectionState.Disconnected)
			await hub.StartAsync();
	}
}